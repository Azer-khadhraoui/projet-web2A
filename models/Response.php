<?php
class response {
    private $id_response;
    private $id_question;
    private $id_responder;
    private $response_text;
    private $created_at;

    // Constructor without id_response, which is auto-generated by the database
    public function __construct(int $id_question, int $id_responder, string $response_text, DateTime $created_at = null) {
        $this->id_question = $id_question;
        $this->id_responder = $id_responder;
        $this->response_text = $response_text;
        $this->created_at = $created_at ?? new DateTime(); // Default to current date/time if not provided
    }

    // Method to save the response to the database
    public function save($pdo) {
        $stmt = $pdo->prepare("INSERT INTO response (id_question, id_responder, response_text, created_at) VALUES (?, ?, ?, ?)");
        $stmt->execute([
            $this->id_question,
            $this->id_responder,
            $this->response_text,
            $this->created_at->format('Y-m-d H:i:s') // Format DateTime for MySQL
        ]);
        $this->id_response = $pdo->lastInsertId(); // Set the id after inserting
    }
    public static function getByQuestionId($pdo, $id_question) {
        $stmt = $pdo->prepare("SELECT * FROM response WHERE id_question = ? ORDER BY created_at ASC");
        $stmt->execute([$id_question]);
        return $stmt->fetchAll(PDO::FETCH_ASSOC);
    }

    // Static method to get all responses for a specific question
    public static function getAllForQuestion($pdo, $id_question) {
        $stmt = $pdo->prepare("SELECT * FROM response WHERE id_question = ? ORDER BY created_at ASC");
        $stmt->execute([$id_question]);
        return $stmt->fetchAll(PDO::FETCH_ASSOC);
    }

    // New method to get comments for questions marked as suggestions
    public static function getCommentsForSuggestions($pdo) {
        $stmt = $pdo->query("
            SELECT response.*
            FROM response
            JOIN question ON response.id_question = question.id
            WHERE question.is_suggestion = 1
            ORDER BY response.created_at ASC
        ");
        return $stmt->fetchAll(PDO::FETCH_ASSOC);
    }
    public static function getAll($pdo) {
        try {
            $stmt = $pdo->query("SELECT * FROM response ORDER BY created_at ASC");
            return $stmt->fetchAll(PDO::FETCH_ASSOC);
        } catch (Exception $e) {
            die("Error fetching all responses: " . $e->getMessage());
        }
    }
    

    // Getters
    public function getIdResponse(): int {
        return $this->id_response;
    }

    public function getIdQuestion(): int {
        return $this->id_question;
    }

    public function getIdResponder(): int {
        return $this->id_responder;
    }

    public function getResponseText(): string {
        return $this->response_text;
    }

    public function getCreatedAt(): DateTime {
        return $this->created_at;
    }

    // Setters
    public function setIdResponse(int $id_response): void {
        $this->id_response = $id_response;
    }

    public function setIdQuestion(int $id_question): void {
        $this->id_question = $id_question;
    }

    public function setIdResponder(int $id_responder): void {
        $this->id_responder = $id_responder;
    }

    public function setResponseText(string $response_text): void {
        $this->response_text = $response_text;
    }

    public function setCreatedAt(DateTime $created_at): void {
        $this->created_at = $created_at;
    }
}
?>
